#
##
### Written by the CAT team
##
#
heat_template_version: 2013-05-23


description: Blueprint CoreOS Rundeck

parameter_groups:
 - label: General parameters
   parameters:
     - keypair_name
     - flavor_name
     - volume_type
     - volume_size

 - label: Credentials parameters
   parameters:
     - os_auth_url
     - os_region_name
     - os_tenant_name
     - os_username
     - os_password

parameters:

  keypair_name:
    description: Keypair to inject in instance
    label: SSH Keypair
    type: string

  flavor_name:
    default: n1.cw.standard-1
    description: Flavor to use for the deployed instance
    type: string
    label: Instance Type (Flavor)
    constraints:
      - allowed_values:
          - n1.cw.standard-1
          - n1.cw.standard-2
          - n1.cw.standard-4
          - n1.cw.standard-8
          - n1.cw.standard-12
          - n1.cw.standard-16

  volume_size:
    default: 5
    label: Backup Volume Size
    description: Size of Volume for rundeck Storage (Gigabytes)
    type: number
    constraints:
      - range: { min: 5, max: 10000 }
        description: Volume must be at least 10 gigabytes

  volume_type:
    default: standard
    label: Backup Volume Type
    description: Performance flavor of the linked Volume for rundeck Storage
    type: string
    constraints:
      - allowed_values:
          - standard
          - performant
  os_region_name:
      default: fr1
      label: OpenStack region
      description: OpenStack region
      type: string
      constraints:
        - allowed_values:
          - fr1
          - fr2

  os_username:
    description: OpenStack Username
    label: OpenStack Username
    type: string

  os_password:
    description: OpenStack Password
    label: OpenStack Password
    type: string
    hidden: true

  os_tenant_name:
    description: OpenStack Tenant Name
    label: OpenStack Tenant Name
    type: string

  os_auth_url:
    description: OpenStack Auth URL
    default: https://identity.fr1.cloudwatt.com/v2.0
    label: OpenStack Auth URL
    type: string


resources:
  network:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network }
      ip_version: 4
      dns_nameservers:
        - 185.23.94.244
        - 185.23.94.245
      cidr: 10.0.1.0/24
      allocation_pools:
        - { start: 10.0.1.100, end: 10.0.1.199 }

  router:
    type: OS::Neutron::Router
    properties:
      admin_state_up: true
      external_gateway_info:
        enable_snat: true
        network: "public"

  interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - { direction: ingress, protocol: TCP, port_range_min: 22, port_range_max: 22 }
        - { direction: ingress, protocol: TCP, port_range_min: 4440, port_range_max: 4440 }
        - { direction: ingress, protocol: ICMP }
        - { direction: egress, protocol: ICMP }
        - { direction: egress, protocol: TCP }
        - { direction: egress, protocol: UDP }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: 6ea98324-0f14-49f6-97c0-885d1b8dc517

  ports:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - ip_address: 10.0.1.254
          subnet_id: { get_resource: subnet }
      security_groups:
        - { get_resource: security_group }

  server:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: keypair_name }
      image: CoreOS Stable 1185.5
      flavor: { get_param: flavor_name }
      user_data_format: RAW
      networks:
        - port: { get_resource: ports }
      user_data:
        str_replace:
          params:
            $private_ipv4: { get_attr: [ ports, fixed_ips, 0, ip_address ] }
            $public_ipv4: { get_attr: [floating_ip, floating_ip_address] }
            $os_username: { get_param: os_username}
            $os_password: { get_param: os_password}
            $os_tenant_name: { get_param: os_tenant_name}
            $os_auth_url: { get_param: os_auth_url}
            $os_region_name: { get_param: os_region_name}
          template: |
            #cloud-config
            write_files:
              - path: /home/core/format.sh
                permissions: 0755
                owner: "root:root"
                content: |
                  #!/bin/bash
                  eval $(sudo blkid /dev/vdb | awk '{print $3}')
                  if [[ "$TYPE" != "ext4" ]]; then
                    /usr/sbin/wipefs -f /dev/vdb
                    /usr/sbin/mkfs.ext4 -F /dev/vdb
                  fi
              - path: /home/core/mount.sh
                permissions: 0755
                owner: "root:root"
                content: |
                  #!/bin/bash
                  sudo mkdir -p { /rundeck/etc/,/rundeck/var/ }
              - path: /home/core/rundeck.env
                permissions: 0775
                owner: "core:core"
                content: |
                           OS_USERNAME="$os_username"
                           OS_TENANT_NAME="$os_tenant_name"
                           OS_PASSWORD="$os_password"
                           OS_REGION_NAME="$os_region_name"
                           OS_AUTH_URL="$os_auth_url"
                           SERVER_URL=http://$public_ipv4:4440
            coreos:
              etcd2:
                name: "%H"
                advertise-client-urls: http://$private_ipv4:2379
                initial-advertise-peer-urls: http://$private_ipv4:2380
                initial-cluster: "%H=http://$private_ipv4:2380"
                listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
                listen-peer-urls: http://$private_ipv4:2380
              units:
                - name: etcd2.service
                  command: start
                - name: fleet.service
                  command: start
                - name: docker-tcp.socket
                  command: start
                  enable: true
                  content: |
                    [Unit]
                    Description=Docker Socket for the API
                    [Socket]
                    ListenStream=2375
                    BindIPv6Only=both
                    Service=docker.service
                    [Install]
                    WantedBy=sockets.target
                - name: format.service
                  command: start
                  content: |
                    [Unit]
                    Description=Formats the ephemeral drive
                    After=dev-vdb.device
                    Requires=dev-vdb.device
                    [Service]
                    Type=oneshot
                    RemainAfterExit=yes
                    ExecStart=/home/core/format.sh
                - name: rundeck.mount
                  command: start
                  content: |
                    [Unit]
                    Description=Mount ephemeral to /rundeck
                    Requires=format.service
                    After=format.service
                    [Mount]
                    What=/dev/vdb
                    Where=/rundeck/
                    Type=ext4
                    [Service]
                    Type=oneshot
                    ExecStart=/home/core/mount.sh
                - name: rundeck.service
                  command: start
                  content: |
                    [Unit]
                    Description=Rundeck UI
                    After=docker.service
                    Requires=docker.service
                    [Service]
                    ExecStartPre=-/usr/bin/docker kill jordan/rundeck:latest
                    ExecStartPre=-/usr/bin/docker rm jordan/rundeck:latest
                    ExecStartPre=/usr/bin/docker pull jordan/rundeck:latest
                    ExecStart=/usr/bin/docker run -p 4440:4440 --env-file /home/core/rundeck.env -v /rundeck/var/:/var/rundeck --name rundeck -t jordan/rundeck:latest

                    [Install]
                    WantedBy=multi-user.target

  cinder_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      volume_type: {get_param: volume_type }

  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: cinder_volume }
      instance_uuid: { get_resource: server }
      mountpoint: /dev/vdb

  floating_ip_link:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: server }

outputs:
  floating_ip_url:
    description: Rundeck URL
    value:
      str_replace:
        template: http://$floating_ip:4440
        params:
          $floating_ip: { get_attr: [floating_ip, floating_ip_address] }
