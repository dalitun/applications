heat_template_version: 2013-05-23
description: A load-balancer server
parameters:
  image:
    type: string
    description: Image used for servers
  key_name:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the servers
  pool_id:
    type: string
    description: Pool to contact
  network:
    type: string
    description: Network used by the server
  security_group:
    label: security_group
    type: string
resources:

  cloud_init:
    # this resource demonstrates multiple cloud-config resources
    # with a merge_how strategy
    type: OS::Heat::CloudConfig
    properties:
     cloud_config:
      #cloud-config
      ssh_authorized_keys:
         - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+WV/HAcibBU5rceIk6GBQIvKRXQdrvPj/KDrs1bomgpzaHptrKpuEIvSsfvLq3KHG9P90AvjRgPs1PNfZIy+WOPjcBG91zr1qTaWqdknlDj3Gm2EajVLxKtafyVBaUQUKNDugx+hDAfc0psTJJyN45RuY+nHLCfzYf1ERzo6qgNhZCwrj6Yhjut1Js/7U0/tjLn8cVZB6oLnOQIp7s9VWCpFAc9jyLgQl1XsbLpdDI1nJkQnTbTtjdM4pJZgMbmj/7BQ4Xq2vJSJ/7mqcyMqMUQhzThEvE4OWkFaaXwDyP/Bh6S+sZ2uXh1AYXlWfhRydytKtsB+XT3wJaT2sXPNF root@mycloudm-driver-2.novalocal
      packages:
         - jq
         - curl
      runcmd:
         - [ sh, -xc, 'curl -s -H "Content-Type: application/json" -XPOST -d "{\"user\": \"cloud\"}" http://10.0.1.250:30000/api/servers/register/$(curl -s http://169.254.169.254/openstack/latest/meta_data.json| jq -r .uuid)' ]

  postboot:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
         str_replace:
           template: |
               #!/bin/bash
               sudo apt-get -y update
               sudo apt-get install -y apache2 stress
               #curl -sSL http://10.0.1.250:30000/api/servers/register | sh  >>/tmp/log.txt
           params:
               $flavor: { get_param: flavor }

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: cloud_init}
      - config: {get_resource: postboot}



  server:
    type: OS::Nova::Server
    properties:
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
      name:
         str_replace:
               template: $stack
               params:
                  $stack: { get_param: 'OS::stack_name' }
      networks: [{network: {get_param: network} }]
      security_groups:
        - { get_param: security_group }
      user_data_format: RAW
      user_data:
        get_resource: server_init

  member:
    type: OS::Neutron::PoolMember
    properties:
      pool_id: {get_param: pool_id}
      address: {get_attr: [server, first_address]}
      protocol_port: 80

outputs:
  server_ip:
    description: IP Address of the load-balanced server.
    value: { get_attr: [server, first_address] }
  lb_member:
    description: LB member details.
    value: { get_attr: [member, show] }
