heat_template_version: 2013-05-23
description: A load-balancer server
parameters:
  image:
    type: string
    description: Image used for servers
  key_name:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the servers
  pool_id:
    type: string
    description: Pool to contact
  network:
    type: string
    description: Network used by the server
  security_group:
    label: security_group
    type: string  

resources:


  cloud_init:
    # this resource demonstrates multiple cloud-config resources
    # with a merge_how strategy
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
       #cloud-config 
       ssh_authorized_keys: 
         - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNfXari61ek4bTBDcB8uMNv9T2mtyQQ0goH716HICOsLBdSBWhYekw8Zzt8Wf4SK0d0HCM92EhPF4f2xORvJ3le6cNmMwoa0UtD1kug74fObmnI3y2Uohvge3O5xaIwT0I5ajl5HBux+HccK2njojNVuoCKgMEuWSpjYiqnhATMntKWwutxWGCQkDb4FDmHcK9tWos+RV523svER34nvXA5tXqYxHHaK9SoKXUaDgTsmEPtGgrAtwfTFVX16zKaiQ/GgCmyynWD83pNsOB8bj+w5xSL/ywwgn8u9jS4jlPwV64HfQFRKSyfMB4jXU4Hd5bXcLTMuUo4owHzPEC5om1 root@mycloudm-driver-0.novalocal
       packages: 
         - jq 
         - curl 
       runcmd: 
         - [ sh, -xc, 'curl -s -H "Content-Type: application/json" -XPOST -d "{\"user\": \"cloud\"}" http://10.0.1.250:30000/api/servers/register/$(curl -s http://169.254.169.254/openstack/latest/meta_data.json| jq -r .uuid)' ] 

  postboot:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
         str_replace:
           template: |
               #!/bin/bash
               sudo apt-get -y update
               sudo apt-get install -y apache2 stress
               #curl -sSL http://10.0.1.250:30000/api/servers/register | sh  >>/tmp/log.txt              
           params:
               $flavor: { get_param: flavor }  

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: cloud_init}
      - config: {get_resource: postboot}
       


  server:
    type: OS::Nova::Server
    properties:
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
      name:
         str_replace:
               template: $stack
               params:
                  $stack: { get_param: 'OS::stack_name' }
      networks: [{network: {get_param: network} }]
      security_groups:
        - { get_param: security_group }
      user_data_format: RAW
      user_data:
        get_resource: server_init

  member:
    type: OS::Neutron::PoolMember
    properties:
      pool_id: {get_param: pool_id}
      address: {get_attr: [server, first_address]}
      protocol_port: 80

outputs:
  server_ip:
    description: IP Address of the load-balanced server.
    value: { get_attr: [server, first_address] }
  lb_member:
    description: LB member details.
    value: { get_attr: [member, show] }
